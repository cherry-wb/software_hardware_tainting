// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/Pass.h>
#include <llvm/PassManager.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/Analysis/Verifier.h>
#include <llvm/Assembly/PrintModulePass.h>
#include <llvm/IR/BasicBlock.h>
#include <llvm/IR/CallingConv.h>
#include <llvm/IR/Constants.h>
#include <llvm/IR/DerivedTypes.h>
#include <llvm/IR/Function.h>
#include <llvm/IR/GlobalVariable.h>
#include <llvm/IR/InlineAsm.h>
#include <llvm/IR/Instructions.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/Module.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <algorithm>
using namespace llvm;

Module* makeLLVMModule();

int main(int argc, char**argv) {
  Module* Mod = makeLLVMModule();
  verifyModule(*Mod, PrintMessageAction);
  PassManager PM;
  PM.add(createPrintModulePass(&outs()));
  PM.run(*Mod);
  return 0;
}


Module* makeLLVMModule() {
 // Module Construction
 Module* mod = new Module("ptr.bc", getGlobalContext());
 mod->setDataLayout("e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:32:64-v64:64:64-v128:128:128-a0:0:64-f80:32:32-n8:16:32-S128");
 mod->setTargetTriple("i386-pc-linux-gnu");
 
 // Type Definitions
 PointerType* PointerTy_0 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);
 
 ArrayType* ArrayTy_1 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 19);
 
 PointerType* PointerTy_2 = PointerType::get(ArrayTy_1, 0);
 
 std::vector<Type*>FuncTy_3_args;
 PointerType* PointerTy_4 = PointerType::get(IntegerType::get(mod->getContext(), 8), 0);
 
 FuncTy_3_args.push_back(PointerTy_4);
 FuncTy_3_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_3_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_3 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_3_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_5 = PointerType::get(PointerTy_4, 0);
 
 std::vector<Type*>FuncTy_6_args;
 FuncTy_6_args.push_back(PointerTy_4);
 FuncTy_6_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_6_args.push_back(PointerTy_4);
 FunctionType* FuncTy_6 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_6_args,
  /*isVarArg=*/true);
 
 std::vector<Type*>FuncTy_7_args;
 FuncTy_7_args.push_back(PointerTy_4);
 FunctionType* FuncTy_7 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_7_args,
  /*isVarArg=*/false);
 
 std::vector<Type*>FuncTy_8_args;
 FuncTy_8_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_8 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_8_args,
  /*isVarArg=*/false);
 
 std::vector<Type*>FuncTy_10_args;
 FuncTy_10_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_10 = FunctionType::get(
  /*Result=*/PointerTy_4,
  /*Params=*/FuncTy_10_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_9 = PointerType::get(FuncTy_10, 0);
 
 PointerType* PointerTy_11 = PointerType::get(FuncTy_3, 0);
 
 PointerType* PointerTy_12 = PointerType::get(FuncTy_8, 0);
 
 std::vector<Type*>FuncTy_14_args;
 FunctionType* FuncTy_14 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_14_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_13 = PointerType::get(FuncTy_14, 0);
 
 PointerType* PointerTy_15 = PointerType::get(FuncTy_7, 0);
 
 std::vector<Type*>FuncTy_17_args;
 FuncTy_17_args.push_back(PointerTy_4);
 FunctionType* FuncTy_17 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_17_args,
  /*isVarArg=*/true);
 
 PointerType* PointerTy_16 = PointerType::get(FuncTy_17, 0);
 
 std::vector<Type*>FuncTy_18_args;
 FuncTy_18_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_18_args.push_back(PointerTy_5);
 FunctionType* FuncTy_18 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_18_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_19 = PointerType::get(PointerTy_5, 0);
 
 std::vector<Type*>FuncTy_21_args;
 FuncTy_21_args.push_back(PointerTy_4);
 FunctionType* FuncTy_21 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_21_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_20 = PointerType::get(FuncTy_21, 0);
 
 
 // Function Declarations
 
 Function* func_DYTAN_tag = mod->getFunction("DYTAN_tag");
 if (!func_DYTAN_tag) {
 func_DYTAN_tag = Function::Create(
  /*Type=*/FuncTy_3,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"DYTAN_tag", mod); 
 func_DYTAN_tag->setCallingConv(CallingConv::C);
 }
 AttributeSet func_DYTAN_tag_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_DYTAN_tag_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_DYTAN_tag->setAttributes(func_DYTAN_tag_PAL);
 
 Function* func_DYTAN_display = mod->getFunction("DYTAN_display");
 if (!func_DYTAN_display) {
 func_DYTAN_display = Function::Create(
  /*Type=*/FuncTy_6,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"DYTAN_display", mod); 
 func_DYTAN_display->setCallingConv(CallingConv::C);
 }
 AttributeSet func_DYTAN_display_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_DYTAN_display_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_DYTAN_display->setAttributes(func_DYTAN_display_PAL);
 
 Function* func_DYTAN_free = mod->getFunction("DYTAN_free");
 if (!func_DYTAN_free) {
 func_DYTAN_free = Function::Create(
  /*Type=*/FuncTy_7,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"DYTAN_free", mod); 
 func_DYTAN_free->setCallingConv(CallingConv::C);
 }
 AttributeSet func_DYTAN_free_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_DYTAN_free_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_DYTAN_free->setAttributes(func_DYTAN_free_PAL);
 
 Function* func_prRandStr = mod->getFunction("prRandStr");
 if (!func_prRandStr) {
 func_prRandStr = Function::Create(
  /*Type=*/FuncTy_8,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"prRandStr", mod); 
 func_prRandStr->setCallingConv(CallingConv::C);
 }
 AttributeSet func_prRandStr_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_prRandStr_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_prRandStr->setAttributes(func_prRandStr_PAL);
 
 Function* func_malloc = mod->getFunction("malloc");
 if (!func_malloc) {
 func_malloc = Function::Create(
  /*Type=*/FuncTy_10,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"malloc", mod); // (external, no body)
 func_malloc->setCallingConv(CallingConv::C);
 }
 AttributeSet func_malloc_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoAlias);
    PAS = AttributeSet::get(mod->getContext(), 0U, B);
   }
  
  Attrs.push_back(PAS);
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_malloc_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_malloc->setAttributes(func_malloc_PAL);

Function* func_srand = mod->getFunction("srand");
if (!func_srand) {
func_srand = Function::Create(
 /*Type=*/FuncTy_8,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"srand", mod); // (external, no body)
func_srand->setCallingConv(CallingConv::C);
}
AttributeSet func_srand_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_srand_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_srand->setAttributes(func_srand_PAL);

Function* func_rand = mod->getFunction("rand");
if (!func_rand) {
func_rand = Function::Create(
 /*Type=*/FuncTy_14,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"rand", mod); // (external, no body)
func_rand->setCallingConv(CallingConv::C);
}
AttributeSet func_rand_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_rand_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_rand->setAttributes(func_rand_PAL);

Function* func_free = mod->getFunction("free");
if (!func_free) {
func_free = Function::Create(
 /*Type=*/FuncTy_7,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"free", mod); // (external, no body)
func_free->setCallingConv(CallingConv::C);
}
AttributeSet func_free_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_free_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_free->setAttributes(func_free_PAL);

Function* func_printf = mod->getFunction("printf");
if (!func_printf) {
func_printf = Function::Create(
 /*Type=*/FuncTy_17,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"printf", mod); // (external, no body)
func_printf->setCallingConv(CallingConv::C);
}
AttributeSet func_printf_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_printf_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_printf->setAttributes(func_printf_PAL);

Function* func_main = mod->getFunction("main");
if (!func_main) {
func_main = Function::Create(
 /*Type=*/FuncTy_18,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"main", mod); 
func_main->setCallingConv(CallingConv::C);
}
AttributeSet func_main_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_main_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_main->setAttributes(func_main_PAL);

Function* func_atoi = mod->getFunction("atoi");
if (!func_atoi) {
func_atoi = Function::Create(
 /*Type=*/FuncTy_21,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"atoi", mod); // (external, no body)
func_atoi->setCallingConv(CallingConv::C);
}
AttributeSet func_atoi_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::ReadOnly);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_atoi_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_atoi->setAttributes(func_atoi_PAL);

// Global Variable Declarations


GlobalVariable* gvar_int32_count = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/IntegerType::get(mod->getContext(), 32),
/*isConstant=*/false,
/*Linkage=*/GlobalValue::ExternalLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/"count");
gvar_int32_count->setAlignment(4);

GlobalVariable* gvar_array__str = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_1,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str");
gvar_array__str->setAlignment(1);

// Constant Definitions
ConstantInt* const_int32_22 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("7"), 10));
Constant *const_array_23 = ConstantDataArray::getString(mod->getContext(), "Random string: %s\x0A", true);
ConstantInt* const_int32_24 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
ConstantInt* const_int32_25 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("5"), 10));
ConstantPointerNull* const_ptr_26 = ConstantPointerNull::get(PointerTy_4);
ConstantInt* const_int32_27 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("0"), 10));
ConstantInt* const_int32_28 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("26"), 10));
ConstantInt* const_int32_29 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("97"), 10));
ConstantInt* const_int8_30 = ConstantInt::get(mod->getContext(), APInt(8, StringRef("0"), 10));
std::vector<Constant*> const_ptr_31_indices;
const_ptr_31_indices.push_back(const_int32_27);
const_ptr_31_indices.push_back(const_int32_27);
Constant* const_ptr_31 = ConstantExpr::getGetElementPtr(gvar_array__str, const_ptr_31_indices);

// Global Variable Definitions
gvar_int32_count->setInitializer(const_int32_22);
gvar_array__str->setInitializer(const_array_23);

// Function Definitions

// Function: DYTAN_tag (func_DYTAN_tag)
{
 Function::arg_iterator args = func_DYTAN_tag->arg_begin();
 Value* ptr_addr = args++;
 ptr_addr->setName("addr");
 Value* int32_size = args++;
 int32_size->setName("size");
 Value* int32_id = args++;
 int32_id->setName("id");
 
 BasicBlock* label_entry = BasicBlock::Create(mod->getContext(), "entry",func_DYTAN_tag,0);
 
 // Block entry (label_entry)
 AllocaInst* ptr_addr_addr = new AllocaInst(PointerTy_4, "addr.addr", label_entry);
 ptr_addr_addr->setAlignment(4);
 AllocaInst* ptr_size_addr = new AllocaInst(IntegerType::get(mod->getContext(), 32), "size.addr", label_entry);
 ptr_size_addr->setAlignment(4);
 AllocaInst* ptr_id_addr = new AllocaInst(IntegerType::get(mod->getContext(), 32), "id.addr", label_entry);
 ptr_id_addr->setAlignment(4);
 StoreInst* void_32 = new StoreInst(ptr_addr, ptr_addr_addr, false, label_entry);
 void_32->setAlignment(4);
 StoreInst* void_33 = new StoreInst(int32_size, ptr_size_addr, false, label_entry);
 void_33->setAlignment(4);
 StoreInst* void_34 = new StoreInst(int32_id, ptr_id_addr, false, label_entry);
 void_34->setAlignment(4);
 ReturnInst::Create(mod->getContext(), label_entry);
 
}

// Function: DYTAN_display (func_DYTAN_display)
{
 Function::arg_iterator args = func_DYTAN_display->arg_begin();
 Value* ptr_addr_36 = args++;
 ptr_addr_36->setName("addr");
 Value* int32_size_37 = args++;
 int32_size_37->setName("size");
 Value* ptr_fmt = args++;
 ptr_fmt->setName("fmt");
 
 BasicBlock* label_entry_38 = BasicBlock::Create(mod->getContext(), "entry",func_DYTAN_display,0);
 
 // Block entry (label_entry_38)
 AllocaInst* ptr_addr_addr_39 = new AllocaInst(PointerTy_4, "addr.addr", label_entry_38);
 ptr_addr_addr_39->setAlignment(4);
 AllocaInst* ptr_size_addr_40 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "size.addr", label_entry_38);
 ptr_size_addr_40->setAlignment(4);
 AllocaInst* ptr_fmt_addr = new AllocaInst(PointerTy_4, "fmt.addr", label_entry_38);
 ptr_fmt_addr->setAlignment(4);
 StoreInst* void_41 = new StoreInst(ptr_addr_36, ptr_addr_addr_39, false, label_entry_38);
 void_41->setAlignment(4);
 StoreInst* void_42 = new StoreInst(int32_size_37, ptr_size_addr_40, false, label_entry_38);
 void_42->setAlignment(4);
 StoreInst* void_43 = new StoreInst(ptr_fmt, ptr_fmt_addr, false, label_entry_38);
 void_43->setAlignment(4);
 ReturnInst::Create(mod->getContext(), label_entry_38);
 
}

// Function: DYTAN_free (func_DYTAN_free)
{
 Function::arg_iterator args = func_DYTAN_free->arg_begin();
 Value* ptr_addr_45 = args++;
 ptr_addr_45->setName("addr");
 
 BasicBlock* label_entry_46 = BasicBlock::Create(mod->getContext(), "entry",func_DYTAN_free,0);
 
 // Block entry (label_entry_46)
 AllocaInst* ptr_addr_addr_47 = new AllocaInst(PointerTy_4, "addr.addr", label_entry_46);
 ptr_addr_addr_47->setAlignment(4);
 StoreInst* void_48 = new StoreInst(ptr_addr_45, ptr_addr_addr_47, false, label_entry_46);
 void_48->setAlignment(4);
 ReturnInst::Create(mod->getContext(), label_entry_46);
 
}

// Function: prRandStr (func_prRandStr)
{
 Function::arg_iterator args = func_prRandStr->arg_begin();
 Value* int32_n = args++;
 int32_n->setName("n");
 
 BasicBlock* label_entry_50 = BasicBlock::Create(mod->getContext(), "entry",func_prRandStr,0);
 BasicBlock* label_if_then = BasicBlock::Create(mod->getContext(), "if.then",func_prRandStr,0);
 BasicBlock* label_if_end = BasicBlock::Create(mod->getContext(), "if.end",func_prRandStr,0);
 BasicBlock* label_for_cond = BasicBlock::Create(mod->getContext(), "for.cond",func_prRandStr,0);
 BasicBlock* label_for_body = BasicBlock::Create(mod->getContext(), "for.body",func_prRandStr,0);
 BasicBlock* label_for_inc = BasicBlock::Create(mod->getContext(), "for.inc",func_prRandStr,0);
 BasicBlock* label_for_end = BasicBlock::Create(mod->getContext(), "for.end",func_prRandStr,0);
 BasicBlock* label_return = BasicBlock::Create(mod->getContext(), "return",func_prRandStr,0);
 
 // Block entry (label_entry_50)
 AllocaInst* ptr_n_addr = new AllocaInst(IntegerType::get(mod->getContext(), 32), "n.addr", label_entry_50);
 ptr_n_addr->setAlignment(4);
 AllocaInst* ptr_i = new AllocaInst(IntegerType::get(mod->getContext(), 32), "i", label_entry_50);
 ptr_i->setAlignment(4);
 AllocaInst* ptr_seed = new AllocaInst(IntegerType::get(mod->getContext(), 32), "seed", label_entry_50);
 ptr_seed->setAlignment(4);
 AllocaInst* ptr_buffer = new AllocaInst(PointerTy_4, "buffer", label_entry_50);
 ptr_buffer->setAlignment(4);
 StoreInst* void_51 = new StoreInst(int32_n, ptr_n_addr, false, label_entry_50);
 void_51->setAlignment(4);
 LoadInst* int32_52 = new LoadInst(gvar_int32_count, "", false, label_entry_50);
 int32_52->setAlignment(4);
 BinaryOperator* int32_inc = BinaryOperator::Create(Instruction::Add, int32_52, const_int32_24, "inc", label_entry_50);
 StoreInst* void_53 = new StoreInst(int32_inc, gvar_int32_count, false, label_entry_50);
 void_53->setAlignment(4);
 LoadInst* int32_54 = new LoadInst(ptr_n_addr, "", false, label_entry_50);
 int32_54->setAlignment(4);
 CallInst* ptr_call = CallInst::Create(func_malloc, int32_54, "call", label_entry_50);
 ptr_call->setCallingConv(CallingConv::C);
 ptr_call->setTailCall(false);
 AttributeSet ptr_call_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoAlias);
    PAS = AttributeSet::get(mod->getContext(), 0U, B);
   }
  
  Attrs.push_back(PAS);
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 ptr_call_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
ptr_call->setAttributes(ptr_call_PAL);

StoreInst* void_55 = new StoreInst(ptr_call, ptr_buffer, false, label_entry_50);
void_55->setAlignment(4);
LoadInst* ptr_56 = new LoadInst(ptr_buffer, "", false, label_entry_50);
ptr_56->setAlignment(4);
LoadInst* int32_57 = new LoadInst(ptr_n_addr, "", false, label_entry_50);
int32_57->setAlignment(4);
std::vector<Value*> void_58_params;
void_58_params.push_back(ptr_56);
void_58_params.push_back(int32_57);
void_58_params.push_back(const_int32_25);
CallInst* void_58 = CallInst::Create(func_DYTAN_tag, void_58_params, "", label_entry_50);
void_58->setCallingConv(CallingConv::C);
void_58->setTailCall(false);
AttributeSet void_58_PAL;
void_58->setAttributes(void_58_PAL);

LoadInst* ptr_59 = new LoadInst(ptr_buffer, "", false, label_entry_50);
ptr_59->setAlignment(4);
ICmpInst* int1_cmp = new ICmpInst(*label_entry_50, ICmpInst::ICMP_EQ, ptr_59, const_ptr_26, "cmp");
BranchInst::Create(label_if_then, label_if_end, int1_cmp, label_entry_50);

// Block if.then (label_if_then)
BranchInst::Create(label_return, label_if_then);

// Block if.end (label_if_end)
LoadInst* int32_62 = new LoadInst(gvar_int32_count, "", false, label_if_end);
int32_62->setAlignment(4);
StoreInst* void_63 = new StoreInst(int32_62, ptr_seed, false, label_if_end);
void_63->setAlignment(4);
LoadInst* int32_64 = new LoadInst(ptr_seed, "", false, label_if_end);
int32_64->setAlignment(4);
CallInst* void_65 = CallInst::Create(func_srand, int32_64, "", label_if_end);
void_65->setCallingConv(CallingConv::C);
void_65->setTailCall(false);
AttributeSet void_65_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 void_65_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
void_65->setAttributes(void_65_PAL);

StoreInst* void_66 = new StoreInst(const_int32_27, ptr_i, false, label_if_end);
void_66->setAlignment(4);
BranchInst::Create(label_for_cond, label_if_end);

// Block for.cond (label_for_cond)
LoadInst* int32_68 = new LoadInst(ptr_i, "", false, label_for_cond);
int32_68->setAlignment(4);
LoadInst* int32_69 = new LoadInst(ptr_n_addr, "", false, label_for_cond);
int32_69->setAlignment(4);
ICmpInst* int1_cmp1 = new ICmpInst(*label_for_cond, ICmpInst::ICMP_SLE, int32_68, int32_69, "cmp1");
BranchInst::Create(label_for_body, label_for_end, int1_cmp1, label_for_cond);

// Block for.body (label_for_body)
CallInst* int32_call2 = CallInst::Create(func_rand, "call2", label_for_body);
int32_call2->setCallingConv(CallingConv::C);
int32_call2->setTailCall(false);
AttributeSet int32_call2_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 int32_call2_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
int32_call2->setAttributes(int32_call2_PAL);

BinaryOperator* int32_rem = BinaryOperator::Create(Instruction::SRem, int32_call2, const_int32_28, "rem", label_for_body);
BinaryOperator* int32_add = BinaryOperator::Create(Instruction::Add, int32_rem, const_int32_29, "add", label_for_body);
CastInst* int8_conv = new TruncInst(int32_add, IntegerType::get(mod->getContext(), 8), "conv", label_for_body);
LoadInst* int32_71 = new LoadInst(ptr_i, "", false, label_for_body);
int32_71->setAlignment(4);
LoadInst* ptr_72 = new LoadInst(ptr_buffer, "", false, label_for_body);
ptr_72->setAlignment(4);
GetElementPtrInst* ptr_arrayidx = GetElementPtrInst::Create(ptr_72, int32_71, "arrayidx", label_for_body);
StoreInst* void_73 = new StoreInst(int8_conv, ptr_arrayidx, false, label_for_body);
void_73->setAlignment(1);
BranchInst::Create(label_for_inc, label_for_body);

// Block for.inc (label_for_inc)
LoadInst* int32_75 = new LoadInst(ptr_i, "", false, label_for_inc);
int32_75->setAlignment(4);
BinaryOperator* int32_inc3 = BinaryOperator::Create(Instruction::Add, int32_75, const_int32_24, "inc3", label_for_inc);
StoreInst* void_76 = new StoreInst(int32_inc3, ptr_i, false, label_for_inc);
void_76->setAlignment(4);
BranchInst::Create(label_for_cond, label_for_inc);

// Block for.end (label_for_end)
LoadInst* int32_78 = new LoadInst(ptr_n_addr, "", false, label_for_end);
int32_78->setAlignment(4);
BinaryOperator* int32_sub = BinaryOperator::Create(Instruction::Sub, int32_78, const_int32_24, "sub", label_for_end);
LoadInst* ptr_79 = new LoadInst(ptr_buffer, "", false, label_for_end);
ptr_79->setAlignment(4);
GetElementPtrInst* ptr_arrayidx4 = GetElementPtrInst::Create(ptr_79, int32_sub, "arrayidx4", label_for_end);
StoreInst* void_80 = new StoreInst(const_int8_30, ptr_arrayidx4, false, label_for_end);
void_80->setAlignment(1);
LoadInst* ptr_81 = new LoadInst(ptr_buffer, "", false, label_for_end);
ptr_81->setAlignment(4);
CallInst* void_82 = CallInst::Create(func_free, ptr_81, "", label_for_end);
void_82->setCallingConv(CallingConv::C);
void_82->setTailCall(false);
AttributeSet void_82_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 void_82_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
void_82->setAttributes(void_82_PAL);

LoadInst* ptr_83 = new LoadInst(ptr_buffer, "", false, label_for_end);
ptr_83->setAlignment(4);
std::vector<Value*> int32_call5_params;
int32_call5_params.push_back(const_ptr_31);
int32_call5_params.push_back(ptr_83);
CallInst* int32_call5 = CallInst::Create(func_printf, int32_call5_params, "call5", label_for_end);
int32_call5->setCallingConv(CallingConv::C);
int32_call5->setTailCall(false);
AttributeSet int32_call5_PAL;
int32_call5->setAttributes(int32_call5_PAL);

BranchInst::Create(label_return, label_for_end);

// Block return (label_return)
ReturnInst::Create(mod->getContext(), label_return);

}

// Function: main (func_main)
{
 Function::arg_iterator args = func_main->arg_begin();
 Value* int32_argc = args++;
 int32_argc->setName("argc");
 Value* ptr_argv = args++;
 ptr_argv->setName("argv");
 
 BasicBlock* label_entry_86 = BasicBlock::Create(mod->getContext(), "entry",func_main,0);
 
 // Block entry (label_entry_86)
 AllocaInst* ptr_argc_addr = new AllocaInst(IntegerType::get(mod->getContext(), 32), "argc.addr", label_entry_86);
 ptr_argc_addr->setAlignment(4);
 AllocaInst* ptr_argv_addr = new AllocaInst(PointerTy_5, "argv.addr", label_entry_86);
 ptr_argv_addr->setAlignment(4);
 StoreInst* void_87 = new StoreInst(int32_argc, ptr_argc_addr, false, label_entry_86);
 void_87->setAlignment(4);
 StoreInst* void_88 = new StoreInst(ptr_argv, ptr_argv_addr, false, label_entry_86);
 void_88->setAlignment(4);
 LoadInst* ptr_89 = new LoadInst(ptr_argv_addr, "", false, label_entry_86);
 ptr_89->setAlignment(4);
 GetElementPtrInst* ptr_arrayidx_90 = GetElementPtrInst::Create(ptr_89, const_int32_24, "arrayidx", label_entry_86);
 LoadInst* ptr_91 = new LoadInst(ptr_arrayidx_90, "", false, label_entry_86);
 ptr_91->setAlignment(4);
 CallInst* int32_call = CallInst::Create(func_atoi, ptr_91, "call", label_entry_86);
 int32_call->setCallingConv(CallingConv::C);
 int32_call->setTailCall(false);
 AttributeSet int32_call_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadOnly);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  int32_call_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 int32_call->setAttributes(int32_call_PAL);
 
 CallInst* void_92 = CallInst::Create(func_prRandStr, int32_call, "", label_entry_86);
 void_92->setCallingConv(CallingConv::C);
 void_92->setTailCall(false);
 AttributeSet void_92_PAL;
 void_92->setAttributes(void_92_PAL);
 
 ReturnInst::Create(mod->getContext(), const_int32_27, label_entry_86);
 
}

return mod;
}
