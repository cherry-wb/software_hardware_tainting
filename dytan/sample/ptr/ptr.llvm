; ModuleID = '<stdin>'
target datalayout = "e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:32:64-v64:64:64-v128:128:128-a0:0:64-f80:32:32-n8:16:32-S128"
target triple = "i386-pc-linux-gnu"

@count = global i32 7, align 4
@.str = private unnamed_addr constant [19 x i8] c"Random string: %s\0A\00", align 1

; Function Attrs: nounwind
define void @DYTAN_tag(i8* %addr, i32 %size, i32 %id) #0 {
entry:
  %addr.addr = alloca i8*, align 4
  %size.addr = alloca i32, align 4
  %id.addr = alloca i32, align 4
  store i8* %addr, i8** %addr.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i32 %id, i32* %id.addr, align 4
  ret void
}

; Function Attrs: nounwind
define void @DYTAN_free(i8* %addr) #0 {
entry:
  %addr.addr = alloca i8*, align 4
  store i8* %addr, i8** %addr.addr, align 4
  ret void
}

; Function Attrs: nounwind
define void @DYTAN_check(i8* %pointer, i8* %memory) #0 {
entry:
  %pointer.addr = alloca i8*, align 4
  %memory.addr = alloca i8*, align 4
  store i8* %pointer, i8** %pointer.addr, align 4
  store i8* %memory, i8** %memory.addr, align 4
  ret void
}

; Function Attrs: nounwind
define void @prRandStr(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %seed = alloca i32, align 4
  %buffer = alloca i8*, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32* %n.addr, align 4
  %call = call noalias i8* @malloc(i32 %0) #3
  store i8* %call, i8** %buffer, align 4
  %1 = load i8** %buffer, align 4
  %2 = load i32* %n.addr, align 4
  %call1 = call i8* @realloc(i8* %1, i32 %2) #3
  store i8* %call1, i8** %buffer, align 4
  %3 = load i32* %n.addr, align 4
  %call2 = call noalias i8* @calloc(i32 %3, i32 1) #3
  store i8* %call2, i8** %buffer, align 4
  %4 = load i8** %buffer, align 4
  %cmp = icmp eq i8* %4, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %5 = load i32* @count, align 4
  store i32 %5, i32* %seed, align 4
  %6 = load i32* %seed, align 4
  call void @srand(i32 %6) #3
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %7 = load i32* %i, align 4
  %8 = load i32* %n.addr, align 4
  %cmp3 = icmp sle i32 %7, %8
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call4 = call i32 @rand() #3
  %rem = srem i32 %call4, 26
  %add = add nsw i32 %rem, 97
  %conv = trunc i32 %add to i8
  %9 = load i32* %i, align 4
  %10 = load i8** %buffer, align 4
  %arrayidx = getelementptr inbounds i8* %10, i32 %9
  store i8 %conv, i8* %arrayidx, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i32* %n.addr, align 4
  %sub = sub nsw i32 %12, 1
  %13 = load i8** %buffer, align 4
  %arrayidx5 = getelementptr inbounds i8* %13, i32 %sub
  store i8 0, i8* %arrayidx5, align 1
  %14 = load i8** %buffer, align 4
  call void @free(i8* %14) #3
  %15 = load i8** %buffer, align 4
  %call6 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([19 x i8]* @.str, i32 0, i32 0), i8* %15)
  br label %return

return:                                           ; preds = %for.end, %if.then
  ret void
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i32) #0

; Function Attrs: nounwind
declare i8* @realloc(i8*, i32) #0

; Function Attrs: nounwind
declare noalias i8* @calloc(i32, i32) #0

; Function Attrs: nounwind
declare void @srand(i32) #0

; Function Attrs: nounwind
declare i32 @rand() #0

; Function Attrs: nounwind
declare void @free(i8*) #0

declare i32 @printf(i8*, ...) #1

; Function Attrs: nounwind
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %0 = load i8*** %argv.addr, align 4
  %arrayidx = getelementptr inbounds i8** %0, i32 1
  %1 = load i8** %arrayidx, align 4
  %call = call i32 @atoi(i8* %1) #4
  call void @prRandStr(i32 %call)
  ret i32 0
}

; Function Attrs: nounwind readonly
declare i32 @atoi(i8*) #2

attributes #0 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { nounwind readonly }

!llvm.ident = !{!0}

!0 = metadata !{metadata !"clang version 3.4 (trunk 193096) (llvm/trunk 193095)"}
